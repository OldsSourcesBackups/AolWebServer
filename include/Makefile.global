#
# Makefile.global --
#
#      This is the common Makefile that contains all variables and
#      utilities used by AOLserver source code and modules.
#


#
# Installation locations.
#
PREFIX       =   /usr/local/aolserver
INST         =   $(PREFIX)
INSTBIN      =   $(INST)/bin
INSTLIB      =   $(INST)/lib
INSTINC      =   $(INST)/include
INSTLOG      =   $(INST)/log
INSTMOD      =   $(INST)/modules
INSTTCL      =   $(INSTMOD)/tcl
INSTSRV      =   $(INST)/servers/server1
INSTSRVMOD   =   $(INSTSRV)/modules
INSTSRVPAG   =   $(INSTSRV)/pages


#
# Common build variables.  The default is to
# use gcc for compile and shared library link.
#
# NOTE: Purify only works with native compilers.  It works with gcc-2.8.1
#       on some platforms.  IT WILL *NOT* WORK WITH GCC-2.95.2.
#

CC           =   $(PURIFY) gcc
LD           =   ld
LDSO	     =   $(CC) -shared -nostartfiles

#
# Select one of the following for debug or optimization.
#
#CCOPT        =   -DNDEBUG=1
CCOPT        =  -g 
GCCOPT       =   -g -O2 -fPIC -Wall -Wno-unused

CFLAGS       +=  $(CCOPT) -I$(NSHOME)/include -D_REENTRANT=1
LIBNSTHREAD  =   $(NSHOME)/thread/libnsthread.a
LIBS         +=  
MKDIR        =   mkdir -p
RM           =   /bin/rm -f
CP           =   /bin/cp -fp
ECHO         =   /bin/echo
FIND         =   find
MV           =   /bin/mv
LN           =   ln -s
AR           =   ar
ARFLAGS      =   rv
RANLIB       =   true

#
# RPATH is only used by some platforms (so far).
#
RPATH = $(PREFIX)/lib:/usr/local/aolserver/lib:/opt/aolserver/lib:/usr/local/lib

#
# Auto-detect the platform
#
PLATFORM = unknown


#
# KNOWN-GOOD PLATFORMS FOR THIS RELEASE:
#
# **=read notes carefully
#
#    HP/UX 10.20, 11.x, and better
#    Linux i386 from Red Hat**
#    Solaris 2.6 SPARC and better
#    Solaris 7 x86 and better
#    DEC OSF/1 Tru64 UNIX 4.x and better
#    SGI Irix 6.4**
#    FreeBSD 3.x i386 and better
#
# UNTESTED PLATFORMS:
#
#    OpenBSD 2.x and better
#    SCO Unixware 7.x
#    Mac OS X Public Beta (desktop Darwin/Mach 3.0-based product)
#    Mac OS X Server (Mach 2.5-based undead zombie product)
#
# UNSUPPORTED PLATFORMS:
#
#    NetBSD 1.x (no threads library)
#    SCO Xenix-based (OpenServer)
#

#
# HP/UX 11.x -- gcc
#
#  The HP/UX 10.20 build works fine on HP/UX 11.x
#  "gcc -g" may have trouble supplying debug symbols.
#  SMP is fully supported by HP/UX.
#  
ifeq (HP-UXB.11.00, $(shell uname -s)$(shell uname -r))
    PLATFORM=hp11
    # CC=$(PURIFY) cc
    # CFLAGS+=-O2 -Ae +DAportable +z
    CFLAGS+=$(GCCOPT)
    LDSO=$(LD) -b
    NSDLIBS=-lm
    LDFLAGS=-Wl,-E
    LIBS+=-lpthread
    CFLAGS+=-DUSE_DLSHL=1 -D__hp11=1
endif


#
# HP/UX 10.20 -- gcc
#
#  The HP/UX 10.20 build works fine on HP/UX 11.x.
#  "gcc -g" may have trouble supplying debug symbols.
#  SMP is fully supported by HP/UX if the "DCE Threads" package is installed.
#
ifeq (HP-UXB.10.20, $(shell uname -s)$(shell uname -r))
    PLATFORM=hp10
    # CC=$(PURIFY) cc
    # CFLAGS+=-O2 -Ae +DAportable +z
    CFLAGS+=$(GCCOPT)
    LDSO=$(LD) -b
    NSDLIBS=-lm
    LDFLAGS=-Wl,-E
    LIBS+=-ldce -lc_r
    CFLAGS+=-D__hp10=1 -DHAVE_PTHREAD_D4=1 -DUSE_DLSHL=1 -DNEED_HERRNO=1
endif


#
# Linux -- gcc
#
#  Post-mortem debugging with core dumps is all but impossible.
#  We use the VA Linux release of Red Hat 6.x exclusively.
#  SMP and threads are badly supported by Linux (we recommend Solaris x86).
#
ifeq (Linux,$(shell uname))
    PLATFORM=linux
    LDFLAGS+=-Wl,-E
    CFLAGS+=$(GCCOPT)
    NSDLIBS=-lm
    LIBS+=-ldl -lpthread 
    CFLAGS+=-DHAVE_CMMSG=1 -DUSE_FIONREAD=1 -DHAVE_COND_EINTR=1
endif


#
# Sun Solaris SPARC and x86 -- SUNWspro
#
#  Purify only works with SUNWspro and gcc-2.8.1.
#  The "-pipe" option to gcc does not work on some versions of Solaris.
#  SMP is fully supported by Solaris on both SPARC and x86.
#
ifeq (SunOS,$(shell uname))
    PLATFORM=solaris
    CC=$(PURIFY) /opt/SUNWspro/bin/cc
    CFLAGS+=-g -xO2 -KPIC -xarch=v8plusa 
    #CFLAGS+=$(GCCOPT) -mcpu=ultrasparc
    LDSO=$(LD) -G
    NSDLIBS=-lm
    LIBS+=-lsocket -lnsl -ldl -lposix4 -lthread -lresolv -R $(RPATH)
    LD=/usr/ccs/bin/ld
    AR=/usr/ccs/bin/ar
    CFLAGS+=-D_POSIX_PTHREAD_SEMANTICS=1 -DUSE_PTHREAD_SYSSCOPE=1 \
            -DUSE_PTHREAD_PSHARED=1 -DHAVE_ETIME_BUG=1 \
            -DUSE_DUPHIGH=1 -DHAVE_FORK1=1
endif


#
# DEC OSF/1, Digital UNIX, Tru64 UNIX -- gcc
#
#  This should be changed to gcc as soon as possible.
#  This is a 64-bit platform.
#  SMP is fully supported by DEC UNIX.
#
ifeq (OSF1,$(shell uname))
    PLATFORM=osf
    CC=$(PURIFY) cc
    CFLAGS+=$(GCCOPT) -std1 -pthread
    LDFLAGS+=-pthread
    LDSO=$(LD) -shared -expect_unresolved '*'
    NSDLIBS=-lm
    LIBS+=-lrt
endif


#
# SGI Irix (6.4 or better) -- cc
#
#  We only use o32 binaries and use "cc -o32" to build.
#  GCC: unset ABI, set SGI_ABI env variable to n32 to force linker to behave.
#  CC: unset SGI_ABI; set the ABI variable to "-n32".
#  gcc only works if all third-party libraries are in the "n32" ABI.
#  The "-pipe" option to gcc does not work on some versions of Irix.
#  Use "systune" command to set "maxuproc" and "nproc" to reasonable values.
#  SMP is fully supported by Irix.
#
ifeq (IRIX, $(findstring IRIX, $(shell uname)))
    PLATFORM=irix
    SGI_ABI=o32
    ABI=-$(SGI_ABI)
    CC=$(PURIFY) cc
    CFLAGS+=$(ABI) -O2 -fullwarn
    LDSO=$(LD) $(ABI) -shared
    #CFLAGS+=$(GCCOPT)
    LDFLAGS+=$(ABI)
    NSDLIBS=-lm
    #LIBS+=-lpthread
    CFLAGS+=-DUSE_SPROC=1 -D_SGI_MP_SOURCE=1
    ifeq (o32, $(ABI))
	CFLAGS+=-DUSE_DUPHIGH=1
    endif
endif


#
# FreeBSD 3.x -- gcc
#
#  The pthread library that ships with FreeBSD 3.3 or better is required.
#  SMP is supported by recent FreeBSD 4.x releases.
#
ifeq (FreeBSD,$(shell uname))
    PLATFORM=freebsd
    CFLAGS+=$(GCCOPT) -pthread
    LDFLAGS+=-pthread -Wl,-E
    RANLIB=ranlib
    CFLAGS+=-D_THREAD_SAFE=1 -DHAVE_CMMSG=1 -DNO_TIMEZONE=1 -DHAVE_TIMEGM=1
    NSDLIBS=-lm
endif


#
# OpenBSD 2.5 or better -- gcc
#
# Contributed by Michael Yoon <michael@yoon.org>
# SMP is not supported by OpenBSD.
#
ifeq (OpenBSD,$(shell uname))
    PLATFORM=openbsd
    CFLAGS+=$(GCCOPT) -pthread
    LDFLAGS+=-pthread -Wl,-E
    RANLIB=ranlib
    CFLAGS+=-DHAVE_CMMSG=1 -DUSE_DLSYMPREFIX=1 -DUSE_RTLD_LAZY=1 \
           -DNO_TIMEZONE=1 -DHAVE_TIMEGM=1 -D_THREAD_SAFE=1
    NSDLIBS=-lm
endif


#
# SCO Unixware 7.x -- cc
#
#  This should be changed to gcc as soon as possible -- anybody?
#  Do not confuse Unixware with OpenServer or other Caldera OS's.
#  SMP is fully supported by Unixware (but remains untested).
#
ifeq (UnixWare,$(shell uname))
    PLATFORM=unixware
    CC=$(PURIFY) cc
    CFLAGS+=-O2 -Kpic -Kthread -D__unixware
    LDFLAGS=-Wl,-B export
    LDSO=$(LD) -G
    LIBS+=-Kthread -lsocket
    NSDLIBS=-lm
    CLFAGS+=-DUSE_PTHREAD_SYSSCOPE=1 -DHAVE_SENDV=1 -DHAVE_CMMSG=1
endif


#
# Mac OS X -- cc
#
#  The Mac OS X Server and Public Beta are completely different systems.
#  cc is gcc; the Mac OS X make is gmake.
#  Tested under releases 1.0 and 1.02.
#  OS X Server is an undead zombie product.  Use the Darwin version instead.
#  SMP support by Mac OS X is unknown.
#
ifeq (Rhapsody,$(shell uname))
    PLATFORM=osx
endif
ifeq (Darwin,$(shell uname))
    PLATFORM=osx
endif
ifeq (osx,$(PLATFORM))
    CC=$(PURIFY) cc
    LD=cc
    CFLAGS+=$(GCCOPT) -dynamic -traditional-cpp
    LDSO=$(LD) -bundle -undefined suppress
    RANLIB=ranlib
    NSDLIBS=
    CFLAGS+=-DHAVE_CMMSG=1 -DUSE_DYLD=1 -DUSE_DLSYMPREFIX=1 \
            -DNO_RAND48=1 -DNO_TIMEZONE=1 -DMACOSX=1
endif

ifeq (unknown,$(PLATFORM))
    error unknown platform
endif

#
# Set the names of the Tcl libraries
#
#    Note:  Tcl 7.6 on *BSD has a different name for no apparent reason.
#
TCL8X_DIR=tcl8.3.2
TCL8X_LIB=libtcl8.3g.a
TCL76_DIR=tcl7.6
ifeq (bsd, $(findstring bsd, $(PLATFORM)))
  TCL76_LIB=libtcl76.a
else
  TCL76_LIB=libtcl7.6.a
endif

LIBTCL76=$(NSHOME)/$(TCL76_DIR)/unix/$(TCL76_LIB)
LIBTCL8X=$(NSHOME)/$(TCL8X_DIR)/unix/$(TCL8X_LIB)

#
# Rules for library dependencies.
#
all:

libnspd:
	(cd $(NSHOME)/nspd && $(MAKE) all)

libtcl76:
	(cd $(NSHOME)/$(TCL76_DIR) && $(MAKE) all)

libtcl76-clean:
	(cd $(NSHOME)/$(TCL76_DIR) && $(MAKE) clean)

libtcl8x:
	(cd $(NSHOME)/$(TCL8X_DIR) && $(MAKE) all)

libtcl8x-clean:
	(cd $(NSHOME)/$(TCL8X_DIR) && $(MAKE) clean)

libnsthread:
	(cd $(NSHOME)/thread && $(MAKE) all)

libnsthread-clean:
	(cd $(NSHOME)/thread && $(MAKE) clean)
