#
# Makefile.global --
#
#      This is the common Makefile that contains all variables and
#      utilities used by AOLserver source code and modules.
#

#
# To build, type "gmake"
# To override the default compiler on SOME platforms, type:
# To use Purify, type "gmake nativeme=1 PURIFY=/path/to/purify/executable".
#

#
# Installation directories.
#

ifeq (,$(NSHOME))
    NSHOME   =   $(shell pwd)/..
endif
ifeq (,$(INST))
    INST     =   $(NSHOME)/root
endif
INSTBIN      =   $(INST)/bin
INSTLIB      =   $(INST)/lib
INSTINC      =   $(INST)/include
INSTLOG      =   $(INST)/log
INSTMOD      =   $(INST)/modules
INSTTCL      =   $(INSTMOD)/tcl
INSTSRV      =   $(INST)/servers/server1
INSTSRVMOD   =   $(INSTSRV)/modules
INSTSRVPAG   =   $(INSTSRV)/pages


#
# Set DEBUG for debug build variables.
#

DEBUG	     =   1
GCC	     =   1

#
# Common build variables.
#

ifeq (1,$(DEBUG))
    CCOPT     	= -g
    NSTCL_DBG  	=  g
    NSTCL_CFG  	+= --enable-symbols
else
    CCOPT    	= -O2
    CFLAGS   	+= -DNDEBUG=1
endif

ifeq (1,$(GCC))
    CC       	=  gcc 
    LDSO     	=  gcc -shared -nostartfiles
    NSTCL_CFG  	+= --enable-gcc
else
    CC	     =   $(PURIFY) cc
endif

CFLAGS       +=  -I$(NSHOME)/include -D_REENTRANT=1 -DTCL_THREADS=1
MKDIR        =   /bin/mkdir -p
RM           =   /bin/rm -f
CP           =   /bin/cp -fp
ECHO         =   /bin/echo
FIND         =   find
MV           =   /bin/mv
LN           =   ln -s
AR           =   ar
ARFLAGS      =   rv
RANLIB       =   true

#
# Directory configuration.
#

NSTCL_MAJOR  	= 8
NSTCL_MINOR  	= 3
NSTCL_PATCH  	= .3
NSTCL_VERSION	= $(NSTCL_MAJOR).$(NSTCL_MINOR)
NSTCL_ROOT	= $(NSHOME)/tcl$(NSTCL_VERSION)$(NSTCL_PATCH)
NSTCL_DIR	= $(NSTCL_ROOT)/unix

NSTHREAD_DIR	= $(NSHOME)/thread
NSD_DIR		= $(NSHOME)/nsd


#
# Library configuration
#

NSTCL_CFG	+= --prefix=$(INST)
NSTCL		= tcl$(NSTCL_VERSION)$(NSTCL_DBG)
NSTCL_FILE	= lib$(NSTCL).so
NSTCL_PATH	= $(NSTCL_DIR)/$(NSTCL_FILE)
NSTCL_LIB	= -L$(NSTCL_DIR) -l$(NSTCL)

NSTHREAD	= nsthread
NSTHREAD_FILE	= lib$(NSTHREAD).so
NSTHREAD_PATH	= $(NSTHREAD_DIR)/$(NSTHREAD_FILE)
NSTHREAD_LIB	= -L$(NSTHREAD_DIR) -l$(NSTHREAD)

NSD	 	= nsd
NSD_FILE	= lib$(NSD).so
NSD_PATH	= $(NSD_DIR)/$(NSD_FILE)
NSD_LIB		= -L$(NSD_DIR) -l$(NSD)

RFLAG		= -R
RPATH		= $(RFLAG) $(INSTLIB) $(RFLAG) $(NSTCL_DIR) $(RFLAG) $(NSTHREAD_DIR) $(RFLAG) $(NSD_DIR)

LIBS	     	= -lm $(RPATH)
MAINLIBS	= $(NSTCL_LIB) $(NSTHREAD_LIB) $(NSD_LIB) $(LIBS)

#
# Figure the OS and architecture.
#
PLATFORM = unknown
PLAT     = $(shell uname -a)

#
# HP/UX
#
ifneq (,$(findstring HP-UX,$(PLAT)))
    PLATFORM=hp10
    ifneq (1,$(GCC))
        CFLAGS+=-Ae +DAportable +z
    else
        CFLAGS+=-mpa-risc-1-0
    endif
    LDSO=$(LD) -b
    LDFLAGS=-Wl,-E
    LIBS+=-ldce -lc_r
    CFLAGS+=-D__hp10=1 -DHAVE_PTHREAD_D4=1 -DUSE_DLSHL=1 -DNEED_HERRNO=1
endif


#
# Linux
#
ifneq (,$(findstring Linux,$(PLAT)))
    PLATFORM=linux
    LDFLAGS+=-Wl,-E
    RFLAG=-Xlinker -rpath -Xlinker
    ## We optimize for either i686 or i586 -- they really are very different.
    ifneq (,$(findstring "i686",$(PLAT)))
        CFLAGS+=-mcpu=i686
    endif
    ifneq (,$(findstring "i586",$(PLAT)))
        CFLAGS+=-mcpu=i586
    endif
    LIBS+=-ldl -lpthread 
    CFLAGS+=-DHAVE_CMMSG=1 -DUSE_FIONREAD=1 -DHAVE_COND_EINTR=1
endif


#
# Solaris
#
#    Note: Purify works only on Solaris 7 SPARC with SUNWspro or gcc-2.8.1.
#
ifneq (,$(findstring SunOS,$(PLAT)))
    PLATFORM=solaris

    ifneq (1,$(GCC))
        CC=$(PURIFY) /opt/SUNWspro/bin/cc
	ifneq (1,$(DEBUG))
            CCOPT = -xO2
	endif
        CFLAGS+=-KPIC -erroff=%none
        ifneq (,$(findstring sparc,$(PLAT)))
            CFLAGS+=-xarch=v8plusa
        else
            CFLAGS+=-xpentium
        endif
    else
        ifneq (,$(findstring sparc,$(PLAT)))
            CFLAGS+=-mcpu=ultrasparc
        else
            CFLAGS+=-mcpu=pentium
        endif
    endif
    LDSO=/usr/ccs/bin/ld -G
    RPATH += $(RFLAG) /usr/lib/lwp
    LIBS+=-lsocket -lnsl -ldl -lposix4 -lthread -lresolv
    AR=/usr/ccs/bin/ar
    CFLAGS+=-D_POSIX_PTHREAD_SEMANTICS=1 -DUSE_PTHREAD_SYSSCOPE=1 \
            -DUSE_PTHREAD_PSHARED=1 -DHAVE_ETIME_BUG=1 \
            -DUSE_DUPHIGH=1 -DHAVE_FORK1=1
endif


#
# DEC OSF/1, Digital UNIX, Tru64 UNIX
#
ifneq (,$(findstring OSF1,$(PLAT)))
    PLATFORM=osf
    # gcc not verified
    CC=cc
    CFLAGS+=-std1 -pthread -DNO__ENVIRON=1
    LDFLAGS+=-pthread
    LDSO=$(LD) -shared -expect_unresolved '*'
    LIBS+=-lrt
endif


#
# SGI Irix
#
ifneq (,$(findstring IRIX,$(PLAT)))
    PLATFORM=irix
    ## Purify seems to work on Irix o32 only.
    ifneq (1,$(GCC))
	RFLAG=-rpath
        ABI=o32
        ##CCOPT = -g3 -O2
        CFLAGS  += -$(ABI) -KPIC -fullwarn -DUSE_DUPHIGH=1
    else
        ABI=n32
        CFLAGS += -mcpu=mips
    endif
    LDFLAGS += -$(ABI) 
    LDSO=$(LD) -$(ABI) -shared
    CFLAGS+=-D_SGI_MP_SOURCE=1 -DNO_LONGDBL=1
    ifeq ($(USE_SPROC), 0)
    	LIBS += -lpthread
    else
    	CFLAGS+=-DUSE_SPROC=1
    endif

endif

#
# FreeBSD
#
ifneq (,$(findstring FreeBSD,$(PLAT)))
    PLATFORM=freebsd
    CFLAGS+=-pthread
    ## FreeBSD doesn't make a distinction among processors in the x86 class.
    ifneq (,$(findstring i386,$(PLAT)))
        CFLAGS+=-mcpu=pentium
    endif
    LDFLAGS+=-pthread -Wl,-E
    RANLIB=ranlib
    CFLAGS+=-D_THREAD_SAFE=1 -DHAVE_CMMSG=1 -DNO_TIMEZONE=1 \
	   -DHAVE_TIMEGM=1 -DNO__ENVIRON=1
endif


#
# OpenBSD
#
ifneq (,$(findstring OpenBSD,$(PLAT)))
    PLATFORM=openbsd
    CFLAGS+=-pthread
    ## OpenBSD doesn't make a distinction among processors in the x86 class.
    ifneq (,$(findstring i386,$(PLAT)))
        CFLAGS+=-mcpu=pentium
    endif
    LDFLAGS+=-pthread -Wl,-E
    RANLIB=ranlib
    CFLAGS+=-DHAVE_CMMSG=1 -DUSE_DLSYMPREFIX=1 -DUSE_RTLD_LAZY=1 \
           -DNO_TIMEZONE=1 -DHAVE_TIMEGM=1 -D_THREAD_SAFE=1 \
	   -DNO__ENVIRON=1
endif


#
# SCO Unixware
#
ifneq (,$(findstring UnixWare,$(PLAT)))
    PLATFORM=unixware
    CC=cc
    CFLAGS+=-Kpic -Kthread -D__unixware
    LDFLAGS=-Wl,-B export
    LDSO=$(LD) -G
    LIBS+=-Kthread -lsocket
    CLFAGS+=-DUSE_PTHREAD_SYSSCOPE=1 -DHAVE_SENDV=1 -DHAVE_CMMSG=1
endif


#
# Mac OS X
#
ifneq (,$(findstring Rhapsody,$(PLAT)))
    PLATFORM=osx
endif
ifneq (,$(findstring Darwin,$(PLAT)))
    PLATFORM=osx
endif
ifeq (osx,$(PLATFORM))
    CC=cc
    LD=cc
    CFLAGS+=-dynamic -traditional-cpp
    LDSO=$(LD) -bundle -undefined suppress
    RANLIB=ranlib
    CFLAGS+=-DHAVE_CMMSG=1 -DUSE_DYLD=1 -DUSE_DLSYMPREFIX=1 \
            -DNO_RAND48=1 -DNO_TIMEZONE=1 -DMACOSX=1
endif

ifeq (unknown,$(PLATFORM))
    error unknown platform
endif

#
# Add the debug/optimize flags.
#

CFLAGS += $(CCOPT)
