#
# Makefile.global --
#
#      This is the common Makefile that contains all variables and
#      utilities used by AOLserver source code and modules.
#

#
# To build, type "gmake"
# To override the default compiler on SOME platforms, type:
# "gmake nativeme=1" or "gmake gccme=1".
# To use Purify, type "gmake nativeme=1 PURIFY=/path/to/purify/executable".
#

#
# Installation directories.
#
PREFIX       =   /usr/local/aolserver
INST         =   $(PREFIX)
INSTBIN      =   $(INST)/bin
INSTLIB      =   $(INST)/lib
INSTINC      =   $(INST)/include
INSTLOG      =   $(INST)/log
INSTMOD      =   $(INST)/modules
INSTTCL      =   $(INSTMOD)/tcl
INSTSRV      =   $(INST)/servers/server1
INSTSRVMOD   =   $(INSTSRV)/modules
INSTSRVPAG   =   $(INSTSRV)/pages


#
# Common build variables.
#
CC           =   gcc
LD           =   ld
LDSO	     =   $(CC) -shared -nostartfiles
GCCOPT       =   -g -O2 -fPIC -Wall -Wno-unused
CFLAGS       +=  -I$(NSHOME)/include -D_REENTRANT=1 -DNDEBUG=1
LIBNSTHREAD  =   $(NSHOME)/thread/libnsthread.a
LIBS         +=  
MKDIR        =   mkdir -p
RM           =   /bin/rm -f
CP           =   /bin/cp -fp
ECHO         =   /bin/echo
FIND         =   find
MV           =   /bin/mv
LN           =   ln -s
AR           =   ar
ARFLAGS      =   rv
RANLIB       =   true
RPATH = $(PREFIX)/lib:/usr/local/aolserver/lib:/opt/aolserver/lib:/usr/local/lib


#
# Figure the OS and architecture.
#
PLATFORM = unknown
PLAT     = $(shell uname -a)

#
# HP/UX
#
ifneq (,$(findstring HP-UX,$(PLAT)))
    PLATFORM=hp10

    ifndef gccme
        CC=$(PURIFY) cc
        CFLAGS+=-O2 -Ae +DAportable +z
    else
        CFLAGS+=$(GCCOPT) -mpa-risc-1-0
    endif

    LDSO=$(LD) -b
    NSDLIBS=-lm
    LDFLAGS=-Wl,-E
    LIBS+=-ldce -lc_r
    CFLAGS+=-D__hp10=1 -DHAVE_PTHREAD_D4=1 -DUSE_DLSHL=1 -DNEED_HERRNO=1
endif


#
# Linux
#
ifneq (,$(findstring Linux,$(PLAT)))
    PLATFORM=linux
    LDFLAGS+=-Wl,-E

    ## We optimize for either i686 or i586 -- they really are very different.
    ifneq (,$(findstring "i686",$(PLAT)))
        CFLAGS+=-mcpu=i686
    endif
    ifneq (,$(findstring "i586",$(PLAT)))
        CFLAGS+=-mcpu=i586
    endif

    NSDLIBS=-lm
    LIBS+=-ldl -lpthread 
    CFLAGS+=-DHAVE_CMMSG=1 -DUSE_FIONREAD=1 -DHAVE_COND_EINTR=1
endif


#
# Solaris
#
#    Note: Purify works only on Solaris 7 SPARC with SUNWspro or gcc-2.8.1.
#
ifneq (,$(findstring SunOS,$(PLAT)))
    PLATFORM=solaris

    ifdef nativeme
        CC=$(PURIFY) /opt/SUNWspro/bin/cc
        CFLAGS+=-g -xO2 -KPIC -erroff=%none
        ifneq (,$(findstring sparc,$(PLAT)))
            CFLAGS+=-xarch=v8plusa
        else
            CFLAGS+=-xpentium
        endif
    else
        ifneq (,$(findstring sparc,$(PLAT)))
            CFLAGS+=$(GCCOPT) -mcpu=ultrasparc
        else
            CFLAGS+=$(GCCOPT) -mcpu=pentium
        endif
    endif

    LDSO=$(LD) -G
    NSDLIBS=-lm
    LIBS+=-lsocket -lnsl -ldl -lposix4 -lthread -lresolv -R $(RPATH)
    LD=/usr/ccs/bin/ld
    AR=/usr/ccs/bin/ar
    CFLAGS+=-D_POSIX_PTHREAD_SEMANTICS=1 -DUSE_PTHREAD_SYSSCOPE=1 \
            -DUSE_PTHREAD_PSHARED=1 -DHAVE_ETIME_BUG=1 \
            -DUSE_DUPHIGH=1 -DHAVE_FORK1=1
endif


#
# DEC OSF/1, Digital UNIX, Tru64 UNIX
#
ifneq (,$(findstring OSF1,$(PLAT)))
    PLATFORM=osf
    CC=$(PURIFY) cc
    CFLAGS+=$(GGCCOPT) -std1 -pthread
    LDFLAGS+=-pthread
    LDSO=$(LD) -shared -expect_unresolved '*'
    NSDLIBS=-lm
    LIBS+=-lrt
endif


#
# SGI Irix
#
ifneq (,$(findstring IRIX,$(PLAT)))
    PLATFORM=irix

    ## Purify seems to work on Irix o32 only.
    ifndef gccme
        ABI=o32
        CC=$(PURIFY) cc
        CFLAGS  += -$(ABI) -KPIC -g3 -O2 -fullwarn -DUSE_DUPHIGH=1
    else
        ABI=n32
        CFLAGS+=$(GCCOPTS) -mcpu=mips
    endif

    LDFLAGS += -$(ABI)
    LDSO=$(LD) -$(ABI) -shared
    NSDLIBS=-lm
    CFLAGS+=-DUSE_SPROC=1 -D_SGI_MP_SOURCE=1

endif


#
# FreeBSD
#
ifneq (,$(findstring FreeBSD,$(PLAT)))
    PLATFORM=freebsd
    CFLAGS+=$(GGCCOPT) -pthread

    ## FreeBSD doesn't make a distinction among processors in the x86 class.
    ifneq (,$(findstring i386,$(PLAT)))
        CFLAGS+=-mcpu=pentium
    endif

    LDFLAGS+=-pthread -Wl,-E
    RANLIB=ranlib
    CFLAGS+=-D_THREAD_SAFE=1 -DHAVE_CMMSG=1 -DNO_TIMEZONE=1 -DHAVE_TIMEGM=1
    NSDLIBS=-lm
endif


#
# OpenBSD
#
ifneq (,$(findstring OpenBSD,$(PLAT)))
    PLATFORM=openbsd
    CFLAGS+=$(GGCCOPT) -pthread

    ## OpenBSD doesn't make a distinction among processors in the x86 class.
    ifneq (,$(findstring i386,$(PLAT)))
        CFLAGS+=-mcpu=pentium
    endif

    LDFLAGS+=-pthread -Wl,-E
    RANLIB=ranlib
    CFLAGS+=-DHAVE_CMMSG=1 -DUSE_DLSYMPREFIX=1 -DUSE_RTLD_LAZY=1 \
           -DNO_TIMEZONE=1 -DHAVE_TIMEGM=1 -D_THREAD_SAFE=1
    NSDLIBS=-lm
endif


#
# SCO Unixware
#
ifneq (,$(findstring UnixWare,$(PLAT)))
    PLATFORM=unixware
    CC=cc
    CFLAGS+=-O2 -Kpic -Kthread -D__unixware
    LDFLAGS=-Wl,-B export
    LDSO=$(LD) -G
    LIBS+=-Kthread -lsocket
    NSDLIBS=-lm
    CLFAGS+=-DUSE_PTHREAD_SYSSCOPE=1 -DHAVE_SENDV=1 -DHAVE_CMMSG=1
endif


#
# Mac OS X
#
ifneq (,$(findstring Rhapsody,$(PLAT)))
    PLATFORM=osx
endif
ifneq (,$(findstring Darwin,$(PLAT)))
    PLATFORM=osx
endif
ifeq (osx,$(PLATFORM))
    CC=cc
    LD=cc
    CFLAGS+=$(GCCOPT) -dynamic -traditional-cpp
    LDSO=$(LD) -bundle -undefined suppress
    RANLIB=ranlib
    NSDLIBS=
    CFLAGS+=-DHAVE_CMMSG=1 -DUSE_DYLD=1 -DUSE_DLSYMPREFIX=1 \
            -DNO_RAND48=1 -DNO_TIMEZONE=1 -DMACOSX=1
endif

ifeq (unknown,$(PLATFORM))
    error unknown platform
endif

#
# Set the names of the Tcl libraries
#
#    Note:  Tcl 7.6 on *BSD has a different name for no apparent reason.
#
TCL8X_DIR=tcl8.3.2
TCL8X_LIB=libtcl8.3g.a
TCL76_DIR=tcl7.6
ifeq (bsd, $(findstring bsd, $(PLATFORM)))
  TCL76_LIB=libtcl76.a
else
  TCL76_LIB=libtcl7.6.a
endif

LIBTCL76=$(NSHOME)/$(TCL76_DIR)/unix/$(TCL76_LIB)
LIBTCL8X=$(NSHOME)/$(TCL8X_DIR)/unix/$(TCL8X_LIB)

#
# Rules for library dependencies.
#

all:

libnspd:
	(cd $(NSHOME)/nspd && $(MAKE) all)

libtcl76:
	(cd $(NSHOME)/$(TCL76_DIR) && $(MAKE) all)

libtcl76-clean:
	(cd $(NSHOME)/$(TCL76_DIR) && $(MAKE) clean)

libtcl8x:
	(cd $(NSHOME)/$(TCL8X_DIR) && $(MAKE) all)

libtcl8x-clean:
	(cd $(NSHOME)/$(TCL8X_DIR) && $(MAKE) clean)

libnsthread:
	(cd $(NSHOME)/thread && $(MAKE) all)

libnsthread-clean:
	(cd $(NSHOME)/thread && $(MAKE) clean)
